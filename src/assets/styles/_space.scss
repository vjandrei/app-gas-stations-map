@function eightCal($number, $exponent) {
    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
        $value: $value * $number;
        }
    }
    @return #{$value}px; 
}

@function pow($number, $exponent) {
    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
        $value: $value * $number;
        }
    }
    @return $value; 
}

@function power($base, $multiplier, $exponent) {

	/**
     * Set the total variable to return false if it fails.
	 */
    $total: false;

    /**
	 * Check if all arguments are numbers.
	 */
    @if type-of($base) != number
    or type-of($multiplier) != number
    or type-of($exponent) != number {

		/**
         * Return an error if they arguments are not numbers.
		 */
        @error 'The `power()` function only accepts numbers as arguments. Please try again.';
    }

	/**
	 * If no errors, proceed.
	 */
    @else {
		/**
         * Set number to total as a base.
		 */
        $total: $base;

		/**
         * Loop through the number of times it has to power through the
         * multiplication, by multipling the power total with the multipling
         * number the specified number of times by the exponent.
		 */
        @for $i from 1 through $exponent {
            $total: $total * $multiplier;
        }
    }

	/**
     * Return total.
	 */
    @return #{$total}px;
}

$spaceamounts: (8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104); 
$sides: (top, bottom, left, right); // Leave this variable alone

@each $space in $spaceamounts {
  @each $side in $sides {
    .m-#{str-slice($side, 0, 1)}-#{$space} {
      margin-#{$side}: #{$space}px !important;
    }
  
    .p-#{str-slice($side, 0, 1)}-#{$space} {
      padding-#{$side}: #{$space}px !important;
    }
  }
}